-- FUNCTIONS
-- FUNC 1
CREATE OR REPLACE FUNCTION BILLING(ADMID IN NUMBER)
-- SELECT ADMISSION_ID, BILLING(ADMISSION_ID) FROM ADMISSION WHERE ADMISSION_ID = 107;
RETURN NUMBER
IS
TOTAL_BILL NUMBER;
BEGIN
    SELECT
    NVL(SUM(M.QUANTITY * M.UNIT_COST),0) + NVL(SUM(T.COST),0) + NVL(SUM(B.COST_PER_NIGHT * B.NUMBER_OF_NIGHTS_STAYED),0)
    INTO TOTAL_BILL
    FROM ADMISSION A
    LEFT OUTER JOIN MEDICINE_TAKEN M
    ON A.ADMISSION_ID = M.ADMISSION_ID
    LEFT OUTER JOIN TEST_TAKEN T
    ON A.ADMISSION_ID = T.ADMISSION_ID
    LEFT OUTER JOIN BED_TAKEN B
    ON A.ADMISSION_ID = B.ADMISSION_ID
    GROUP BY A.ADMISSION_ID
    HAVING A.ADMISSION_ID = ADMID;

RETURN TOTAL_BILL;
END;
/

-- FUNC 2
CREATE OR REPLACE FUNCTION EVERYDAY_REVENUE_FUNC(GIVEN_DATE IN DATE)
RETURN NUMBER
IS
REV NUMBER;
BEGIN
   EVERYDAY_REVENUE(GIVEN_DATE, REV); 
RETURN REV;
END;
/

-- FUNC 3
CREATE OR REPLACE FUNCTION DRUG_REVENUE(MEDID NUMBER, START_DATE DATE, END_DATE DATE)
--SELECT MEDICINE_ID, DRUG_REVENUE(MEDICINE_ID, '01-FEB-2024', '29-FEB-2024') FROM MEDICINE;
RETURN NUMBER
IS
REVENUE NUMBER;
BEGIN
    SELECT SUM(QUANTITY*UNIT_COST) INTO REVENUE
    FROM MEDICINE_TAKEN
    WHERE TAKEN_DATE BETWEEN START_DATE AND END_DATE
    GROUP BY MEDICINE_ID
    HAVING MEDICINE_ID = MEDID; 
RETURN REVENUE;
END;
/

-- FUNC 4
CREATE OR REPLACE FUNCTION DRUG_QUANTITIES_SOLD(MEDID NUMBER, START_DATE DATE, END_DATE DATE)
RETURN NUMBER
IS
Q NUMBER;
BEGIN
    SELECT SUM(QUANTITY) INTO Q
    FROM MEDICINE_TAKEN
    WHERE TAKEN_DATE BETWEEN START_DATE AND END_DATE
    GROUP BY MEDICINE_ID
    HAVING MEDICINE_ID = MEDID; 
RETURN Q;
END;
/

-- FUNC 5
CREATE OR REPLACE FUNCTION TEST_REVENUE(TID NUMBER, START_DATE DATE, END_DATE DATE)
RETURN NUMBER
IS
REVENUE NUMBER;
BEGIN
    SELECT SUM(COST) INTO REVENUE
    FROM TEST_TAKEN
    WHERE TAKEN_DATE BETWEEN START_DATE AND END_DATE
    GROUP BY TEST_ID
    HAVING TEST_ID = TID;
RETURN REVENUE;    
END;
/

-- FUNC 6
CREATE OR REPLACE FUNCTION NUMBER_OF_TIMES_TEST_DONE(TID IN NUMBER, START_DATE IN DATE, END_DATE IN DATE)
RETURN NUMBER
IS
T NUMBER;
BEGIN
    SELECT COUNT(*) INTO T
    FROM TEST_TAKEN
    WHERE TAKEN_DATE BETWEEN START_DATE AND END_DATE
    GROUP BY TEST_ID
    HAVING TEST_ID = TID;
RETURN T;    
END;
/



-- procedures
-- PROC 1
CREATE OR REPLACE PROCEDURE EVERYDAY_REVENUE(GIVEN_DATE IN DATE, TOTAL_REVENUE OUT NUMBER)
IS
BEDREV NUMBER;
MEDREV NUMBER;
TESTREV NUMBER;
BEGIN
    SELECT NVL(SUM(COST_PER_NIGHT), 0) INTO BEDREV-- EACH DAY BED
    FROM BED_TAKEN
    WHERE GIVEN_DATE BETWEEN START_DATE AND NVL(END_DATE, SYSDATE);

    SELECT NVL(SUM(QUANTITY * UNIT_COST), 0) INTO MEDREV -- EACH DAY MED
    FROM MEDICINE_TAKEN
    WHERE TRUNC(TAKEN_DATE) = GIVEN_DATE;

    SELECT NVL(SUM(COST), 0) INTO TESTREV -- EACH DAY TEST
    FROM TEST_TAKEN
    WHERE TRUNC(TAKEN_DATE) = GIVEN_DATE;

TOTAL_REVENUE := (BEDREV + MEDREV + TESTREV);
END;
/

-- PROC 2
CREATE OR REPLACE PROCEDURE CALCULATE_NIGHTS_STAYED
IS
BEGIN
    FOR R IN (SELECT * FROM BED_TAKEN)
    LOOP
        UPDATE BED_TAKEN
        SET NUMBER_OF_NIGHTS_STAYED = FLOOR(nvl(END_DATE, SYSDATE) - START_DATE)
        WHERE BED_TAKEN_ID = R.BED_TAKEN_ID;
    END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE CALCULATE_CAPACITY_OF_ROOM
IS
RID NUMBER;
CNT NUMBER;
BEGIN
    FOR S IN (SELECT R.ROOM_ID AS RID, COUNT(*) AS CNT
    FROM ROOM R
    JOIN BED B
    ON R.ROOM_ID = B.ROOM_ID
    GROUP BY R.ROOM_ID
    ORDER BY R.ROOM_ID)
    LOOP
        UPDATE ROOM
        SET CAPACITY = S.CNT
        WHERE ROOM_ID = S.RID;
    END LOOP;
END;

-- PROC 3
CREATE OR REPLACE PROCEDURE VALIDATING_TEST_TAKEN_PROC
(ADMID IN NUMBER, TESTID IN NUMBER, ERRORBOOL OUT NUMBER)
IS
ERRORBOOL1 NUMBER := 1;
ERRORBOOL2 NUMBER := 1;
BEGIN
    ERRORBOOL := 1;
    FOR R IN (SELECT ADMISSION_ID FROM ADMISSION)
    LOOP
        IF ADMID = R.ADMISSION_ID THEN ERRORBOOL1 := 0;
        END IF;
    END LOOP;

    FOR R IN (SELECT TEST_ID FROM TEST)
    LOOP
        IF TESTID = R.TEST_ID THEN ERRORBOOL2 := 0;
        END IF;
    END LOOP;

    IF ERRORBOOL1 = 0 AND ERRORBOOL2 = 0 THEN
    ERRORBOOL := 0;
    END IF;
END;
/

-- PROC 4
CREATE OR REPLACE PROCEDURE VALIDATING_MEDICINE_TAKEN_PROC
(ADMID IN NUMBER, MEDID IN NUMBER, ERRORBOOL OUT NUMBER)
IS
ERRORBOOL1 NUMBER := 1;
ERRORBOOL2 NUMBER := 1;
BEGIN
    ERRORBOOL := 1;
    FOR R IN (SELECT ADMISSION_ID FROM ADMISSION)
    LOOP
        IF ADMID = R.ADMISSION_ID THEN ERRORBOOL1 := 0;
        END IF;
    END LOOP;

    FOR R IN (SELECT MEDICINE_ID FROM MEDICINE)
    LOOP
        IF MEDID = R.MEDICINE_ID THEN ERRORBOOL2 := 0;
        END IF;
    END LOOP;

    IF ERRORBOOL1 = 0 AND ERRORBOOL2 = 0 THEN
    ERRORBOOL := 0;
    END IF;
END;
/

-- PROC 5
CREATE OR REPLACE PROCEDURE VALIDATE_DISCHARGE_PROC(ADMID IN NUMBER, ERRORBOOL OUT NUMBER)
IS
BEGIN
    ERRORBOOL := 1; -- ERROR
    FOR R IN (SELECT ADMISSION_ID FROM ADMISSION WHERE DISCHARGE_DATE IS NULL)
    LOOP
        IF ADMID = R.ADMISSION_ID THEN ERRORBOOL := 0;
        -- VERIFY IF PATIENT IS CURRENTLY ADMITTED
        END IF;
    END LOOP;
END;
/

-- TRIGGERS

CREATE OR REPLACE TRIGGER VALIDATE_BED_ALLOCATION
BEFORE INSERT
ON BED_TAKEN
FOR EACH ROW
DECLARE
ERRORBOOL2 NUMBER := 1;
BEGIN
    -- IF NEW BED IS NOT UNOCCUPIED THEN THROW ERROR
    FOR R IN (SELECT BED_ID AS B FROM BED
    WHERE BED_ID NOT IN
    (
    SELECT BED_ID FROM BED_TAKEN
    WHERE END_DATE IS NOT NULL
    ))
    LOOP
        IF R.B = :NEW.BED_ID
        THEN ERRORBOOL2 := 0;
        END IF;
    END LOOP;

    IF ERRORBOOL2 = 1 THEN
    RAISE_APPLICATION_ERROR(-20001, 'THE BED CHANGE WAS INVALID');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER VALIDATE_DISCHARGE
BEFORE UPDATE OF DISCHARGE_DATE
ON ADMISSION
FOR EACH ROW
DECLARE
ERRORBOOL NUMBER := 0;
BEGIN
    VALIDATE_DISCHARGE_PROC(:NEW.ADMISSION_ID, ERRORBOOL);
    IF ERRORBOOL = 1
    THEN RAISE_APPLICATION_ERROR(-20001, 'NO SUCH PATIENT IS CURRENTLY ADMITTED IN THE HOSPITAL');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER VALIDATING_MEDICINE_TAKEN
BEFORE INSERT
ON MEDICINE_TAKEN
FOR EACH ROW
DECLARE
ERRORBOOL NUMBER;
BEGIN
    VALIDATING_MEDICINE_TAKEN_PROC(:NEW.ADMISSION_ID, :NEW.MEDICINE_ID, ERRORBOOL);
    IF ERRORBOOL = 1 THEN
        RAISE_APPLICATION_ERROR(-20001, 'INVALID MEDICINE ID AND/OR ADMISSION ID');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER VALIDATING_TEST_TAKEN
BEFORE INSERT
ON TEST_TAKEN
FOR EACH ROW
DECLARE
ERRORBOOL NUMBER;
BEGIN
    VALIDATING_TEST_TAKEN_PROC(:NEW.ADMISSION_ID, :NEW.TEST_ID, ERRORBOOL);
    IF ERRORBOOL = 1 THEN
        RAISE_APPLICATION_ERROR(-20001, 'INVALID TEST ID AND/OR ADMISSION ID');
    END IF;
END;
/